#!/usr/bin/python3 -u
#
# journal2gelf
# ============
#
# Get structured log records from the systemd journal and send them to a
# Graylog2 server as GELF messages.
#
# Tested on Python 2.7, may work on other versions.
#
# journald / systemd compatibility
# --------------------------------
# For systemd < 190, use '-m' switch to enable multi-line JSON parsing.
#
# Dependencies:
# -------------
# - graypy (pip-install graypy)
#
# Usage:
# ------
#
# By default, journal2gelf will look for input on stdin. eg:
#
# - Send all logs and exit:
#
#   `journalctl -o json | journal2gelf`
#
# The `-t` flag can be specified and journal2gelf will automatically
# start journalctl in tail mode. This makes it easier to run as a systemd service.
#
#   `journal2gelf -t`
#
# This is equivalent to running:
#
#   `journalctl -o json -f | journal2gelf`
#
#
# Copyright 2012 Joe Miller <https://github.com/joemiller>
#
# Released under the MIT license, see LICENSE for details.
#

import sys
import json
import zlib
import graypy
import traceback

from collections import deque


# TODO:
# - [nice to have] rabbitmq handler

class JournalToGelf:
    facility_names = {
        0: "kern",
        1: "user",
        2: "mail",
        3: "daemon",
        4: "auth",
        5: "syslog",
        6: "lpr",
        7: "news",
        8: "uucp",
        9: "cron",
        10: "authpriv",
        16: "local0",
        17: "local1",
        18: "local2",
        19: "local3",
        20: "local4",
        21: "local5",
        22: "local6",
        23: "local7"
    }

    def __init__(self, host='localhost', port=12201, multiline_format=False):
        self.buf = deque()
        self.multiline_format = multiline_format
        self.gelf = graypy.GELFUDPHandler(host, port)

    def _send_gelf(self):
        try:
            msg = {'version': '1.0'}
            record = json.loads(str(b''.join(self.buf), 'utf-8'))
            for key, value in record.items():
                # journalctl's JSON exporter will convert unprintable (incl. newlines)
                # strings into an array of integers. We convert these integers into
                # their ascii representation and concatenate them together
                # to reconstitute the string.
                if type(value) is list:
                    try:
                        value = ''.join([chr(x) for x in value])
                    except TypeError:
                        # sometimes it's an array of strings. newline join them
                        value = '\n'.join(value)

                if key == '__REALTIME_TIMESTAMP':
                    # convert from systemd's format of microseconds expressed as
                    # an integer to graylog's float format, eg: "seconds.microseconds"
                    msg['timestamp'] = float(value) / (1000 * 1000)
                elif key == 'PRIORITY':
                    msg['level'] = int(value)
                elif key == 'SYSLOG_FACILITY':
                    msg['facility'] = self.facility_names.get(int(value), 'unknown')
                elif key == '_HOSTNAME':
                    msg['host'] = value
                elif key == 'MESSAGE':
                    msg['short_message'] = value
                elif key.startswith('.'):
                    continue
                elif key == '__CURSOR':
                    continue
                else:
                    # prefix additional fields with '_' for graylog.
                    msg['_' + key] = value
            if msg['short_message'] and len(msg['short_message'].strip()) > 0:
                self.gelf.send(zlib.compress(json.dumps(msg).encode('utf-8')))
        except ValueError:
            print("Warning: invalid JSON. Skipping this record.")
        finally:
            self.buf.clear()

    def run(self, line):
        line = line.strip()

        # systemd > 190 switched to a single-line JSON format for each
        # journal event that is much similar to parse.
        if not self.multiline_format:
            self.buf.append(line)
            self._send_gelf()
        else:
            # systemd < 190 used a multi-line JSON format which requires more work to parse.
            # the first line of `journalctl -o json -f` will not be valid json,
            # it will be "Logs being at ....". Skip it.
            if line.startswith('Logs begin at'):
                return

            # The second line will be the opening bracket for a list, but we
            # don't need that either. Skip it.
            if line.startswith('['):
                return

            if line == "},":
                self.buf.append('}')
                self._send_gelf()
            else:
                self.buf.append(line)


if __name__ == '__main__':
    import optparse
    import subprocess

    opts_parser = optparse.OptionParser()
    opts_parser.add_option('-s', '--server', dest='host', default='localhost',
                           help='Graylog2 server host or IP (default: %default)')
    opts_parser.add_option('-p', '--port', dest='port', default=12201, type='int',
                           help='Graylog2 server port (default: %default)')
    opts_parser.add_option('-t', '--tail', dest='tail', default=False, action='store_true',
                           help='Start journalctl and tail it forever (default: %default)')
    opts_parser.add_option('-m', '--multiline-format', dest='multiline_format', default=False, action='store_true',
                           help='Expect multi-line JSON format (systemd version < 190) (default: %default))')
    (opts, args) = opts_parser.parse_args()

    read_from_fd = None
    if opts.tail:
        read_from_fd = subprocess.Popen(['journalctl', '-o', 'json', '-f'], stdout=subprocess.PIPE).stdout
    else:
        read_from_fd = sys.stdin

    parser = JournalToGelf(host=opts.host, port=opts.port, multiline_format=opts.multiline_format)
    for line in iter(read_from_fd.readline, ''):
        try:
            parser.run(line)
        except Exception as e:
            print("Error sending line to graylog:")
            print(line)
            traceback.print_exc()
